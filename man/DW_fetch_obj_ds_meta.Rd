% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DW_Server.R
\name{DW_fetch_obj_ds_meta}
\alias{DW_fetch_obj_ds_meta}
\title{Fetches Metadata for a Data Source Based on R Object Name}
\usage{
DW_fetch_obj_ds_meta(state, session, dw_view = NULL, ds_obj = NULL)
}
\arguments{
\item{state}{DW state from \code{DW_fetch_state()}}

\item{session}{Shiny session variable}

\item{dw_view}{Optoinal data view to use as a reference point for DW data sources set to NULL if only formods sources are to be used.}

\item{ds_obj}{Name of object that contains data source}
}
\value{
list containing the current dataset with the following format:
\itemize{
  \item{isgood:}  Boolean indicating the whether a resource object was found.
  \item{msgs:}    Any messages generated
  \item{res_row:} Row of catalog associated with resource or \code{NULL} if not found.
  \item{DS:}      Data frame of the current resource
}
}
\description{
Data sources can be either resources from other modules (e.g.
UD and DM) or previously defined dataviews. This function is a simple
interface to retrieve a data source based on the source ID or label.

Resources such as datasets can be specified using the module
ID and either identifier index or the resource label. 
This function will attempt to rectify those and give the "best" answer. If a
resource label is supplied and exists uniquely for that module ID, that
object will be returned. If not then an error will be returned. If the
resource label is not specified and the index is specified and that exists
uniquely, that object will be returned. Otherwise an error will be returned.
}
\examples{
library(formods)
# The example requires a formods DW state object
sess_res = DW_test_mksession()
state    = sess_res$state
session  = sess_res$session

state[["DW"]][["ui"]][["select_dw_element"]]          = "filter"
state[["DW"]][["ui"]][["select_fds_filter_column"]]   = "EVID"
state[["DW"]][["ui"]][["select_fds_filter_operator"]] = "=="
state[["DW"]][["ui"]][["fds_filter_rhs"]]             = 0

# This builds the data wrangling statement based on
# elemets scraped from the UI
dwb_res  = dwrs_builder(state)

# Here we evaluate the resulting command:
dwee_res = dw_eval_element(state, dwb_res[["cmd"]])

# Next we add this wrangling element to the state
state    = DW_add_wrangling_element(
             state    = state, 
             session  = session,
             dwb_res  = dwb_res, 
             dwee_res = dwee_res)

# This creates a new data view and makes it active
state = DW_new_view(state)

# Here we can pluck out that data view from the state
current_view = DW_fetch_current_view(state)

# This will update the key in this view
current_view[["key"]] = "My new view"

# And this will place it back into the state
state = DW_set_current_view(state, session, current_view)

# This will pull out the available sources for the current data view.
# This is used when doing merging:
avail_ds = DW_fetch_available_sources(state, session, dw_view=current_view)

# This will pull out the meta data for a given object
ds_obj  = avail_ds[["catalog"]][["object"]][1]
ds_meta = DW_fetch_obj_ds_meta(
            state   = state, 
            session = session, 
            dw_view=current_view, 
            ds_obj=ds_obj)
}
