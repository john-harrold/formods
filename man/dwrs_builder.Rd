% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DW_Server.R
\name{dwrs_builder}
\alias{dwrs_builder}
\title{Builds a Data Wrangling R Statement From ui Elements:}
\usage{
dwrs_builder(state, session)
}
\arguments{
\item{state}{DW state from \code{DW_fetch_state()}}

\item{session}{Shiny session variable}
}
\value{
list containing the following elements
\itemize{
 \item{isgood:} Return status of the function
 \item{cmd:}    Data wrangling R command
 \item{action:} The action being performed
 \item{pll:}    Preload list (pll) containing components to save with
 mk_preload.
 \item{res_obj:} Resource objects beyond data view used by this wrangling
 statement (e.g. data source used when merging) 
  or \code{NULL} if no resource is used.
 \item{res_obj_DSchecksum:} Checksum of the res_obj
  or \code{NULL} if no resource is used.
 \item{res_obj_mod_id:} Module ID of the res obj 
  or \code{NULL} if no resource is used.
 \item{desc:}   Verbose description of the action
 \item{msgs:}   Messages to be passed back to the user
}
}
\description{
Takes the current ui elements and constructs the appropriate
data wrangling command from the user input.
}
\examples{
library(formods)
# The example requires a formods DW state object
sess_res = DW_test_mksession()
state    = sess_res$state
session  = sess_res$session

state[["DW"]][["ui"]][["select_dw_element"]]          = "filter"
state[["DW"]][["ui"]][["select_fds_filter_column"]]   = "EVID"
state[["DW"]][["ui"]][["select_fds_filter_operator"]] = "=="
state[["DW"]][["ui"]][["fds_filter_rhs"]]             = 0

# This builds the data wrangling statement based on
# elemets scraped from the UI
dwb_res  = dwrs_builder(state)

# Here we evaluate the resulting command:
dwee_res = dw_eval_element(state, dwb_res[["cmd"]])

# Next we add this wrangling element to the state
state    = DW_add_wrangling_element(
             state    = state, 
             session  = session,
             dwb_res  = dwb_res, 
             dwee_res = dwee_res)

# This creates a new data view and makes it active
state = DW_new_view(state)

# Here we can pluck out that data view from the state
current_view = DW_fetch_current_view(state)

# This will update the key in this view
current_view[["key"]] = "My new view"

# And this will place it back into the state
state = DW_set_current_view(state, session, current_view)

# This will pull out the available sources for the current data view.
# This is used when doing merging:
avail_ds = DW_fetch_available_sources(state, session, dw_view=current_view)

# This will pull out the meta data for a given object
ds_obj  = avail_ds[["catalog"]][["object"]][1]
ds_meta = DW_fetch_obj_ds_meta(
            state   = state, 
            session = session, 
            dw_view=current_view, 
            ds_obj=ds_obj)
}
